import numpy as np
from joblib import dump, load

from sklearn import preprocessing

import argparse
random_seed = 21


parser = argparse.ArgumentParser(description='Test on a video with an SVR that has been trained on the LIVE-APV dataset with a feature dictionary generated by chipqa.py')
parser.add_argument('input_feature_file',help='File containing input features generated by chipqa.py (extension: .z)')
args = parser.parse_args()
sts_kurt_feats = load(args.input_feature_file)


sts_kurt_features = np.reshape(sts_kurt_feats['features'],(1,-1))
print(sts_kurt_features.shape)
#sts_kurt = chipqa_features[:,:109]
#chroma_avg = chipqa_features[:,109:125]
#grad_avg = chipqa_features[:,125:157]
#sigma_avg = chipqa_features[:,157:165]
#
#chroma_sd = chipqa_features[:,165:181]
#grad_sd = chipqa_features[:,181:213]
#sigma_sd = chipqa_features[:,213:221]
#
#sts_kurt_features = np.concatenate((chroma_avg,grad_avg,sigma_avg,chroma_sd,grad_sd,sigma_sd,sts_kurt),axis=1)
#print(sts_kurt_features.shape)

grid_svr = load("LIVE_Livestream_trained_svr.z")
scaler =load("LIVE_Livestream_fitted_scaler.z") 
X_train = scaler.transform(sts_kurt_features)
print(X_train)
score = grid_svr.predict(X_train)
print(score)

